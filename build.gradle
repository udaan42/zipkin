buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.2'
    id 'net.researchgate.release' version '2.1.2'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    // Following are workarounds to idea goal failing on:
    // Cannot infer Scala class path because..
    // - no repository is declared in root project 
    repositories { jcenter() }

    // - no Scala library Jar was found
    apply from: "$rootDir/gradle/dependencies.gradle"
    dependencies {
        compile "org.scala-lang:scala-library:${scalaVersion}"
    }
}

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = failOnSnapshotDependencies
    failOnUpdateNeeded = true
    revertOnFail = true
    tagTemplate = "${project.version}"
    preCommitText = ''
    preTagCommitMessage = '[RELEASE] - pre tag commit: '
    tagCommitMessage = '[RELEASE] - creating tag: '
    newVersionCommitMessage = '[RELEASE] - new version commit: '

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToCurrentBranch = true
    }
}

subprojects { subproject ->

    apply from: "$rootDir/gradle/scalatest.gradle"

    compileTestScala {
        scalaCompileOptions.additionalParameters = ["-feature"]
    }

    compileScala {
        scalaCompileOptions.additionalParameters = ["-feature"]
    }

    test {
        maxParallelForks Runtime.runtime.availableProcessors()
    }

    repositories {
        maven { url 'http://repo.typesafe.com/typesafe/releases/' }
        maven { url 'https://maven.twttr.com/' }
    }

    dependencies {
        // Was dependencyOverrides in SBT, will probably cause issues
        compile 'org.apache.zookeeper:zookeeper:3.4.6' // internal twitter + kafka + curator
        compile 'org.slf4j:slf4j-api:1.6.4' // libthrift 0.5 otherwise pins 1.5.x
        // EOF dependencyOverrides

        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-all:1.10.19'
        testCompile "org.scalatest:scalatest_${scalaInterfaceVersion}:2.2.5"
    }
    // SBT migration note: end of zipkinSettings

    bintray {
        // Read variables from travis encrypted config or local
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')

        configurations = ['archives']
        dryRun = false
        publish = true

        pkg {
            licenses = ['Apache-2.0']
            repo = 'zipkin'
            vcsUrl = 'https://github.com/openzipkin/zipkin.git'
            name = "${subproject.name}"
            userOrg = "openzipkin"
            version {
                name = "${project.version}"
                desc = "Zipkin ${subproject.name} version ${project.version}"
                released  = new Date()
                vcsTag = "${project.version}"
            }
        }
    }
}

// Workaround:
// only our subprojects have a bintray configuration. replace the root project's
// `bintrayUpload` task with one that restricts the calls to the subprojects.
// https://github.com/bintray/gradle-bintray-plugin/issues/74#issuecomment-126978089
project.afterEvaluate {
    task bintrayUpload(group: "publishing", overwrite: true) {
        dependsOn subprojects.bintrayUpload
    }
}


// Quick hack to visualize inter-project dependencies
task dependencyReport {
    description "Write the dependency graph of the zipkin-* projects in this repository into project-dependencies.dot for use with GraphViz."
    doLast {
        def file = new File("project-dependencies.dot")
        file.delete()
        file << "digraph {\n"
        file << "splines=ortho\n"
        rootProject.childProjects.each { item ->
            def from = item.value
            from.configurations.compile.dependencies
                    .matching { it in ProjectDependency }
                    .each { to -> file << ("\"${from.name}\" -> \"${to.name}\"\n")}
        }
        file << "}\n"
    }
}

